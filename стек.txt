#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#define size_str 100

typedef struct nodelist node;
typedef struct Steklist stek;



struct nodelist
{
    char data;
    struct nodelist *next;
};

struct Steklist
{
    struct nodelist *top;
    int size;
};



bool push(stek *st, char data) //добавляет новый элемент в стек, если стек пуст, то новый элемент становится верхним, если нет, он указывает на текущий верхний элемент
{
    if(st)
    {
        node *new_el = (node*) malloc(sizeof(node));
        if(new_el)
        {
            new_el -> data = data;
            new_el -> next = NULL;
            if(st -> top == NULL)
            {
                st -> top = new_el;
            }
            else
            {
                new_el -> next = st -> top;
                st -> top = new_el;
            }
            st -> size++;
            return true;
        }
    }
    return false;
}

char pop(stek *st) //удаляет верхний элемент из стека и возвращает его данные, если стек пуст, возвращает 0
{
    if(st)
    {
        if(st -> top)
        {
            char element = st -> top -> data;
            node *ptrIx = st -> top; 
            st -> top = st -> top -> next;
            st -> size--;
            free(ptrIx);
            return element;
        }
    }
    return 0;
}

bool ShowTop(stek *st, char *data) // получает данные верхнего элемента стека без его удаления, если стек пуст, возвращает false
{
    bool full = false;
    if(st && data)
    {
        if(st -> top)
        {
            *data = st -> top -> data;
            full = true;
        }
    }
    return full;
}

void print_stack(stek st) //выводит все элементы стека на экран, если стек пуст, выводит сообщение о том, что он пуст
{
    if(st.top == NULL) printf("Stack is empty!\n");
    node *current = st.top;
    while(current)
    {
        printf("%c\n", current -> data);
        current = current -> next;
    }
}

bool isEmpty(stek st) //проверяет, пуст ли стек, возвращает true, если пуст, и false в противном случае
{
    if(st.top == NULL)
        return true;
    return false;
}

void delStek(stek *st) //очищает стек, освобождая память для всех его элементов
{
    if(st)
    {
        if(st -> top)
        {
            node *ptr = st -> top;
            node *ptrIx = NULL;
            while(ptr)
            {
                ptrIx = ptr;
                ptr = ptr -> next;
                st -> size--;
                free(ptrIx);
            }
            st -> top = NULL;
        }
    }
}

bool chek_lexem(stek *st) 
 //проверяет корректность последовательности символов в стеке, возвращает true, если выражение корректно, и false в противном случае
{ 
    // Проверка, инициализирован ли стек
    if(st == NULL)
        return false; 

    int pos = 0;

    // пока стек не пуст
    while(isEmpty(*st) == false)
    {
        char tmp = pop(st); 

        //является ли элемент грамматической лексемой или числом
        if(('a' <= tmp) && (tmp <= 'z') || (('0' <= tmp) && (tmp <= '9')))
        {
            // если позиция нечетная
            if(pos % 2 != 0)
                return false;
        }

        //является ли элемент операцией
        if((tmp == '+') || (tmp == '-') || (tmp == '*') || (tmp == '/'))
        {
            // если позиция четная
            if(pos % 2 == 0)
                return false;
        }

        pos++;
    }

    return true; // все врено
}


bool check_expression(char *str)
{
    //не NULL указатель
    if(str == NULL)
        return false;
        
    //не пустая строка
    if(strlen(str) == 0)
        return false;
        
    //первыйсимвол не является операцией
    if((str[0] == '+') || (str[0] == '-') || (str[0] == '*') || (str[0] == '/'))
        return false;
        
    //инициализация стека
    stek st = {NULL, 0};
    int i = 0;
//printf("=== %c\n", str[i]);
    //основной цикл для прохода по символам строки
    while(str[i])
    {
        //пустые скобки ()
        if(str[i] == '(')
            if(str[i + 1] && str[i + 1] == ')')
                return false;
        
        // Проверка на закрывающую скобку
        if(str[i] == ')')
        {
            // если после закр скобки идет откр, то ошибка
            if(str[i + 1] == '(')
                return false;
printf("======================\n");
print_stack(st);
printf("======================\n");
            
            char tmp;
            int pos = 0;
            bool flag = true;

            // цикл для обработки элементов до открывающей скобки
            while(flag)
            {
                // если стек пуст, то это ошибка (закр скобка без соответствующей откр)
                if(isEmpty(st))
                    return false;

                tmp = pop(&st);
                pos++; 
                
                char tmp_2; 
                ShowTop(&st, &tmp_2);

                // если найдена открывающая скобка, завершаем цикл, тк дошли до начала выражения в скобках
                if(tmp_2 == '(')
                    flag = false;

                if(('a' <= tmp) && (tmp <= 'z') || (('0' <= tmp) && (tmp <= '9')))
                    if(pos % 2 == 0)
                        return false;
                
                if((tmp == '+') || (tmp == '-') || (tmp == '*') || (tmp == '/'))
                    if(pos % 2 == 1)
                        return false;
                        
            }
            pop(&st); // убираем открывающую скобку из стека
            push(&st, 'L'); //временный элемент
printf("======================\n");
print_stack(st); 
printf("======================\n");
        }
        
        // пропуск пробелов
        else if(str[i] != ' ')
        {
            // проверка если после открывающей скобки идет операция н.п (-6) ---> (0-6)
            if(i > 0 && str[i - 1] == '(' && (str[i] == '+' || str[i] == '-') && str[i + 2] && str[i + 2] == ')')
                push(&st, '0'); // добавляем '0' для обозначения отсутствующего операнда
            
            push(&st, str[i]); //добавляем символ в стек
printf("======================\n");
print_stack(st); 
printf("======================\n");
        }    
        i++;
    }

    // проверка итоговой лексемы
    if(chek_lexem(&st) == false)
        return false;
printf("======================\n");
print_stack(st); 
printf("======================\n");
    // если стек пуст, выражение корректно
    return st.size == 0;
}




int main()
{
    //char str[size_str] = "";//uncorrect
    //char str[size_str] = "()";//uncorrect
    //char str[size_str] = "(+8)";// correct
    //char str[size_str] = "(+f)";// correct
    //char str[size_str] = "(+k)";// correct
    //char str[size_str] = "(-d)";//correct
    //char str[size_str] = "(-8)";//correc
    //char str[size_str] = " (     +8)";// correct
    //char str[size_str] = "(-1) * ()";//uuncorrect
    //char str[size_str] = "(-1)(-2)";//uncorrect
    //char str[size_str] = "1* (-5)*(-5)";//correct
    //char str[size_str] = "(2 + (8 * a))";//correct
    //char str[size_str] = "(2 (+ (8 )* a))";//uncorrect
    //char str[size_str] = "(2) - (2)/(4(*3) ))";//uncorrect
    //char str[size_str] = "  (+2 - ((-2) / h ) + (a /  (-2)))";//correct
    char str[size_str] = "((c-d)*h+1)*(a+b)";//correct
    //char str[size_str] = "b * a * 8 + 1 + a * ";//uncorrect
    //char str[size_str] = "b * a ++ a";//uncorrect
    //char str[size_str] = "-2 + 1";//uncorrect
    //char str[size_str] = "2 + (1)";//correct
    //char str[size_str] = "(2 - 1 / (8/2))";//correct
    //char str[size_str] = "(((-2)-2)-2)";//correct
    //char str[size_str] = "((c + d) * e + 1) * (a + b))))";//uncorrect
    //char str[size_str] = "(a+(b**c) - 8)";//uncorrect
    
    
    /*stek X = {NULL, 0};
    push(&X, '1');
    push(&X, '+');
    push(&X, '5');
    print_stack(X);*/
    
    /*stek X = {NULL, 0};
    push(&X, '1');
    push(&X, '+');
    push(&X, '5');
    pop(&X);
    print_stack(X);*/
    
    
    /*char L;
    ShowTop(&X, &L);
    printf("%c\n", L);*/
    
    
    /*stek E = {NULL, 0};
    print_stack(E); */
    
    
    /*stek X = {NULL, 0};
    push(&X, '1');
    push(&X, '+');
    push(&X, '5');
    delStek(&X);
    print_stack(X);*/
    
    
    
    if(check_expression(str))
        printf("correct\n");
    else
        printf("uncorrect\n");
        
}
